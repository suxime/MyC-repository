<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToSic.Imageflow.Dnn</name>
    </assembly>
    <members>
        <member name="T:ToSic.Imageflow.Dnn.BusinessController">
            <summary>
            BusinessController to support UpgradeModule
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.BusinessController.UpgradeModule(System.String)">
            <summary>
            Executed on module upgrade.
            This Library package have dnn manifest with simplified "module" component,
            to specify this BusinessController that supports upgrade.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions">
            <summary>
            Hybrid cache options
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.DiskCacheDirectory">
            <summary>
            Where to store the cached files and the database
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.QueueSizeLimitInBytes">
            <summary>
            How many RAM bytes to use when writing asynchronously to disk before we switch to writing synchronously.
            Defaults to 100MiB. 
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.CacheSizeLimitInBytes">
            <summary>
            Defaults to 1 GiB. Don't set below 9MB or no files will be cached, since 9MB is reserved just for empty directory entries.
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.MinCleanupBytes">
            <summary>
            The minimum number of bytes to free when running a cleanup task. Defaults to 1MiB;
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.MinAgeToDelete">
            <summary>
            The minimum age of files to delete. Defaults to 10 seconds.
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.DatabaseShards">
            <summary>
            The number of shards to split the metabase into. More shards means more open log files, slower shutdown.
            But more shards also mean less lock contention and faster start time for individual cached requests.
            Defaults to 8. You have to delete the database directory each time you change this number.
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheOptions.#ctor(System.String)">
            <summary>
            HybridCacheOptions with cache folder
            </summary>
            <param name="cacheDir"></param>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheService.#ctor(ToSic.Imageflow.Dnn.Cache.HybridCacheOptions,Microsoft.Extensions.Logging.ILogger{ToSic.Imageflow.Dnn.Cache.HybridCacheService})">
            <summary>
            Constructor for the Hybrid Cache service.
            </summary>
            <param name="options">Options for the Hybrid Cache service.</param>
            <param name="logger">Logger instance for logging events.</param>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheService.GetIssues">
            <summary>
            Get a list of issues within the Hybrid Cache.
            </summary>
            <returns>A list of issues within the cache.</returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start the Hybrid Cache.
            </summary>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>A task representing the starting of the cache.</returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the Hybrid Cache.
            </summary>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>A task representing the stopping of the cache.</returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheService.GetOrCreateBytes(System.Byte[],Imazen.Common.Extensibility.StreamCache.AsyncBytesResult,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Retrieve or create a new set of bytes within the cache.
            </summary>
            <param name="key">The key to identify the cache entry.</param>
            <param name="dataProviderCallback">The function that retrieves missing data.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <param name="retrieveContentType">Whether or not to retrieve the content type of the data.</param>
            <returns>The result of the cache retrieval or creation.</returns>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.Cache.HybridCacheServiceExtensions">
            <summary>
            Extension method for adding hybrid cache service to the IServiceCollection.
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Cache.HybridCacheServiceExtensions.AddImageflowHybridCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,ToSic.Imageflow.Dnn.Cache.HybridCacheOptions)">
            <summary>
            Adds image flow hybrid cache service to the IServiceCollection.
            </summary>
            <param name="services">The IServiceCollection instance.</param>
            <param name="options">The hybrid cache options.</param>
            <returns>The updated IServiceCollection instance.</returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.DependencyInjection.Resolve``1">
            <summary>
            Dependency Injection resolver with a known type as a parameter.
            </summary>
            <typeparam name="T">The type / interface we need.</typeparam>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.DependencyInjection.Configure">
            <summary>
            Configure IoC. If it's already configured, do nothing.
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.DependencyInjection.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices for DI
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.Helpers.MagicBytes">
            <summary>
            Identify common file formats and proxy streams to the HTTP response.
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Helpers.MagicBytes.GetContentTypeFromBytes(System.Byte[])">
            <summary>
            Returns the MIME type based on the provided byte array data.
            </summary>
            <param name="data">The byte array data to check for the MIME type.</param>
            <returns>A string representing the MIME type of the provided data.</returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Helpers.MagicBytes.ProxyToStream(System.IO.Stream,System.Web.HttpResponse)">
            <summary>
            Proxies the given stream to the provided HTTP response, while also setting the content length
            and the content type based off the provided data if possible.
            </summary>
            <param name="sourceStream">The source stream to proxy.</param>
            <param name="response">The HTTP response to write to.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Helpers.PathHelpers.Base64Hash(System.String)">
            <summary>
            Return the Base64 encoded hash string
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.Helpers.PathHelpers.ToQueryDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create a dictionary from a name value collection.
            </summary>
            <returns>A dictionary containing all the key-value pairs from a NameValueCollection</returns>
            <param name="requestQuery">The NameValueCollection containing the input key-value pairs.</param>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.ImageflowModule">
            <summary>
            ImageflowModule
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.ImageflowModule.Init(System.Web.HttpApplication)">
            <summary>
            Init Imageflow HttpModule
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.ImageflowModule.Dispose">
            <summary>
            Dispose Imageflow HttpModule
            </summary>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.Options.ImageflowModuleOptions">
            <summary>
            ImageflowModuleOptions
            </summary>
        </member>
        <member name="P:ToSic.Imageflow.Dnn.Options.ImageflowModuleOptions.DefaultCacheControlString">
            <summary>
            Use "public, max-age=2592000" to cache for 30 days and cache on CDNs and proxies.
            </summary>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.StartUp">
            <summary>
            StartUp is helper class to enable registration of QueryStringRewrite functionality from
            main 2sxc dnn module
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.StartUp.RegisterQueryStringRewrite(System.Func{System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection})">
            <summary>
            Register QueryStringRewrite function for use in ImageJobInfo.
            This registration should be called from the main 2sxc dnn module
            before we use dnn imageflow.
            </summary>
            <param name="queryStringRewrite"></param>
        </member>
        <member name="T:ToSic.Imageflow.Dnn.StartupDnn">
            <summary>
            This configures .net Dependency Injection
            The StartUp is defined as an IServiceRouteMapper.
            This way DNN will auto-run this code before anything else
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.StartupDnn.RegisterRoutes(DotNetNuke.Web.Api.IMapRoute)">
            <summary>
            This will be called by DNN when loading the assemblies.
            We just want to trigger the DependencyInjection-Configure
            </summary>
            <param name="mapRouteManager"></param>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.UpgradeUtil.UpgradeNativeAssemblies">
            <summary>
            Ensure that native assemblies are in place, before we start to use them.
            </summary>
        </member>
        <member name="M:ToSic.Imageflow.Dnn.UpgradeUtil.ReplaceNativeAssemblies">
            <summary>
            Replacing of native assemblies is only possible when this assemblies are not already locked,
            because are in use and loaded.
            This part is tricky and it is possible that it will be executed more times, until all work is done.
            </summary>
        </member>
    </members>
</doc>
